{"mappings":"gfACA,IAAAA,EAAAC,EAAA,SAGuDC,EAAA,CACrDC,WAAYC,SAASC,cAAc,kBACnCC,UAAWF,SAASC,cAAc,iBAClCE,YAAaH,SAASC,cAAc,mBACpCG,OAAQJ,SAASC,cAAc,UAJzBI,EAA+CP,EAA/CC,WAAYO,EAAmCR,EAAnCI,UAAWK,EAAwBT,EAAxBK,YAAaK,EAAWV,EAAXM,OAmC5C,SAASK,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,GACFI,EAAQ,CAAEN,WAAUC,UAGtBM,EAAO,CAAEP,WAAUC,YAClBA,MArCPH,EAAOW,iBAAiB,UAAU,SAAAC,GAEhCA,EAAEC,iBAOF,IAJA,IAAIC,EAAcC,OAAOlB,EAAWmB,OAC9BC,EAAaF,OAAOjB,EAAUkB,OAG3BE,EAAQ,EAAGA,GAASnB,EAAYiB,MAAOE,IAC9CjB,EAAciB,EAAOJ,GAClBK,MAAK,SAAAC,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MACjBf,EAAAiC,OAAOC,QAAQ,uBAAwCC,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,UAE9DqB,OAAM,SAAAJ,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MAClBf,EAAAiC,OAAOI,QAAQ,sBAAqCF,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,UAI9DW,GAAeG,EAIjBjB,EAAO0B,W","sources":["src/js/03-promises.js"],"sourcesContent":["//Imports\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n//Refs\nconst { delayValue, stepValue, amountValue, formEl } = {\n  delayValue: document.querySelector(\"[name='delay']\"),\n  stepValue: document.querySelector(\"[name='step']\"),\n  amountValue: document.querySelector(\"[name='amount']\"),\n  formEl: document.querySelector('.form'),\n};\n\n//Event listner for submit\nformEl.addEventListener('submit', e => {\n  //Prevent page reload on submit\n  e.preventDefault();\n\n  //Vars for delay and step taken from form and made into number\n  let FIRST_DELAY = Number(delayValue.value);\n  const DELAY_STEP = Number(stepValue.value);\n\n  //Loop to create AMOUNT of promises\n  for (let index = 1; index <= amountValue.value; index++) {\n    createPromise(index, FIRST_DELAY)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    //Increate delay every iteration\n    FIRST_DELAY += DELAY_STEP;\n  }\n\n  //Reset form after loop\n  formEl.reset();\n});\n\n//Function to create SINGLE promise at delay value and return object on resolve or reject\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n\n      reject({ position, delay });\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$ref","delayValue","document","querySelector","stepValue","amountValue","formEl","$ce04d3a99e08e73b$var$delayValue","$ce04d3a99e08e73b$var$stepValue","$ce04d3a99e08e73b$var$amountValue","$ce04d3a99e08e73b$var$formEl","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","FIRST_DELAY","Number","value","DELAY_STEP","index","then","param","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.0bf2ce54.js.map"}