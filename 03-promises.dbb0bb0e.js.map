{"mappings":"oeACA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,WAAEC,EAAUC,UAAEC,EAASC,YAAEC,EAAWC,OAAEC,GAAW,CACrDP,WAAYQ,SAASC,cAAc,kBACnCP,UAAWM,SAASC,cAAc,iBAClCL,YAAaI,SAASC,cAAc,mBACpCH,OAAQE,SAASC,cAAc,UA+BjC,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,GACFI,EAAQ,C,SAAEN,E,MAAUC,IAGtBM,EAAO,C,SAAEP,E,MAAUC,MAClBA,MArCPL,EAAOa,iBAAiB,UAAUC,IAEhCA,EAAEC,iBAGF,IAAIC,EAAcC,OAAOvB,EAAWwB,OACpC,MAAMC,EAAaF,OAAOrB,EAAUsB,OAGpC,IAAK,IAAIE,EAAQ,EAAGA,GAAStB,EAAYoB,MAAOE,IAC9CjB,EAAciB,EAAOJ,GAClBK,MAAK,EAACjB,SAAEA,EAAQC,MAAEA,MACjBd,EAAA+B,OAAOC,QAAQ,uBAAqBnB,QAAiBC,UAEtDmB,OAAM,EAACpB,SAAEA,EAAQC,MAAEA,MAClBd,EAAA+B,OAAOG,QAAQ,sBAAoBrB,QAAeC,UAItDW,GAAeG,EAIjBnB,EAAO0B","sources":["src/js/03-promises.js"],"sourcesContent":["//Imports\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n//Refs\nconst { delayValue, stepValue, amountValue, formEl } = {\n  delayValue: document.querySelector(\"[name='delay']\"),\n  stepValue: document.querySelector(\"[name='step']\"),\n  amountValue: document.querySelector(\"[name='amount']\"),\n  formEl: document.querySelector('.form'),\n};\n\n//Event listner for submit\nformEl.addEventListener('submit', e => {\n  //Prevent page reload on submit\n  e.preventDefault();\n\n  //Vars for delay and step taken from form and made into number\n  let FIRST_DELAY = Number(delayValue.value);\n  const DELAY_STEP = Number(stepValue.value);\n\n  //Loop to create AMOUNT of promises\n  for (let index = 1; index <= amountValue.value; index++) {\n    createPromise(index, FIRST_DELAY)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    //Increate delay every iteration\n    FIRST_DELAY += DELAY_STEP;\n  }\n\n  //Reset form after loop\n  formEl.reset();\n});\n\n//Function to create SINGLE promise at delay value and return object on resolve or reject\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n\n      reject({ position, delay });\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","delayValue","$47d4ff9957288465$var$delayValue","stepValue","$47d4ff9957288465$var$stepValue","amountValue","$47d4ff9957288465$var$amountValue","formEl","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","FIRST_DELAY","Number","value","DELAY_STEP","index","then","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.dbb0bb0e.js.map"}